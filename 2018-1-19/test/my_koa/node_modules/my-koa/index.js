const http = require('http');
const assert = require('assert');
module.exports=class{
  constructor(){
    this.__queue = [];
    this.__server = http.createServer((req,res)=>{
      const __this = this;
      const ctx = {
        req,
        res,
        request:{},
        response:{},
      }

      if (this.__queue.length) {
        next(0);

        async function next(n, cb){
          let fn = __this.__queue[n];
          let str = fn.constructor.toString();

          if (str.indexOf('AsyncFunction')!=-1) {
            await fn(ctx, function(){
              return new Promise((resolve, reject)=>{
                next(n+1,function(){
                  resolve();
                })
              })
            })
          } else {
            fn(ctx, function(){
              next(n+1);
            });
          }
          cb && cb();
        }
      } else {
        res.writeHead(404);
        res.write('NOT FOUND');
        res.end();
      }
    });
  }
  listen(port=80){
    this.__server.listen(port);
  }
  use(fn){
    assert(typeof fn == 'function','参数必须是一个函数');
    let str = fn.constructor.toString();
    if (str.indexOf('GeneratorFunction')!=-1) {
      console.warn('koa中generator已经抛弃了，你赶紧改改吧');
    }
    this.__queue.push(fn);
  }
}