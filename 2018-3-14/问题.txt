现在很多人在说微服务，这是啥，具体到node里面，也可以体现吗:)
API――功能强大、复杂

简化API

---------------------------------------------------------------------

WebPack原理
打包――把很多文件打包到一起

1.找到所有引入(import、require)		语法解析
2.把被引入的文件直接放到文件里面	作用域
3.得到――独立运行的结果

webpack原理，gulp原理，vue原理

面试题，什么是闭包？它有什么应用，有什么缺点？

谈一谈你对this关键字的理解
垃圾

老师，http patch 方法怎么使用？好像有坑

---------------------------------------------------------------------

讲多页吧

---------------------------------------------------------------------

找工作
如果老师您是面试官，前端面试，您会考察面试者哪方面的技能？
webpack打包原理如何回答面试中

---------------------------------------------------------------------

全栈工程师要会后台，除了node学哪种比较推荐

---------------------------------------------------------------------

HTTP patch
method	GET、POST、DELETE、patch、HEAD、...

GET类	url	GET、DELETE、HEAD
POST类	body	POST、PUT

patch――创建、更新、追加

router.get('./aaa', function (){});
router.patch('./bbb', function (){});

---------------------------------------------------------------------

数据类型、运算、对象、Function、继承、闭包、作用域、原型链、事件、RegExp、JSON、Ajax、DOM、BOM、内存泄漏、跨域、异步装载、模板引擎、前端MVC、路由、模块化、Canvas、ECMAScript

移动端、响应式、自动化构建、HTTP、离线存储、WEB安全、优化、重构、团队协作、可维护、易用性、SEO、UED、架构、职业生涯、快速学习能力

老师，面试官问，谈谈你对JSON的理解，该如何回答
txt		无格式――没有标准
csv		标准格式――没法支持复杂数据
xml		大
数据库		性能瓶颈、前台用不了
二进制		性能最高、体积最小、速度最快、最复杂的数据――不适合大部分语言	JS不擅长
json		标准格式、能支持复杂数据、速度还行、性能还凑合、JS支持

---------------------------------------------------------------------

alias

---------------------------------------------------------------------

老师讲一讲，模块化开发如何做？
1.设计		80%
  经验――
  重用
  粒度――
2.写

模块：
1.重用、防止冲突
2.一团
















